name: "pwn-dumpme"

mode: LISTEN
hostname: "pwn-dumpme"

bindhost: "0.0.0.0"
port: 1337

max_conns_per_ip: 5

# Cgroup v1 - not used anymore!
#cgroup_mem_mount: "/jailed_cgroups/memory"
#cgroup_pids_mount: "/jailed_cgroups/pids"
#cgroup_cpu_mount: "/jailed_cgroups/cpu"

# IMPORTANT: must be in sync with whatever CGRP path is in run_task.sh
#use_cgroupv2: true
#cgroupv2_mount: "/jailed_cgroups"

# Should the current environment variables be kept when executing the binary?
keep_env: false
# Maximum number of PIDs in the cgroup (i.e. we won't be able to spawn more than the number here)
#cgroup_pids_max: 8
# Maximum memory usage in the cgroup in bytes (i.e. attempts to allocate more will fail)
#cgroup_mem_max: 4097152 # 4 MiB -- could probably be lowered but 4 MiB should be okay

# timeout
time_limit: 600
# number of ms per sec of CPU time the jailed process can use
#cgroup_cpu_ms_per_sec: 900
# amount of CPU time the process can consume in seconds
rlimit_cpu: 100
# Maximum number of CPUs to use: 0 - no limit
max_cpus: 1

# Memory limits via rlimit
# max size of process's virtual memory (address space) in MiB
rlimit_as: 64
# max size of a core file in MiB; 0 means no core dump files are created
rlimit_core: 0
# max size of files the process may create in MiB
rlimit_fsize: 16
# max size of the process stack, in MiB
rlimit_stack: 6
# value one greater than the maximum file descriptor number that can be opened by jailed process
rlimit_nofile: 20    # be careful with this; better to set bigger than lower

# DO NOT change
rlimit_stack_type: SOFT
rlimit_nproc_type: SOFT

# Should /proc be mounted as R/O?
mount_proc: false

mount {
    src: "/task"
    dst: "/task"
    is_bind: true
    rw: false
}

mount {
    src: "/lib"
    dst: "/lib"
    is_bind: true
    rw: false
}

mount {
    src: "/usr/lib"
    dst: "/usr/lib"
    is_bind: true
    rw: false
}

mount {
    src: "/lib64"
    dst: "/lib64"
    is_bind: true
    rw: false
}

mount {
    src: "/usr/bin"
    dst: "/usr/bin"
    is_bind: true
    rw: false
}

# NOTE: If you want the task to use e.g. /bin/sh,
# You probably also want to change the number of opened processes!
mount {
    src: "/bin"
    dst: "/bin"
    is_bind: true
    rw: false
}

#mount {
#    src: "/dev/null"
#    dst: "/dev/null"
#    is_bind: true
#    rw: false
#}

mount {
	dst: "/tmp"
	fstype: "tmpfs"
	rw: true
}

#mount {
#    dst: "/flag.txt"
#    src: "/flag.txt"
#    is_bind: true
#    rw: false
#}

exec_bin {
    path: "/bin/sh"

    # Can be used to test the environment
    # but note that it requires /bin mount and [probably] more than 1 max pids limit!
    #path: "/bin/sh"
}

# We don't pass any seccomp policy
# as it is already enforced by the challenge
#seccomp_string: "POLICY task {}"
# Setting it to true makes audit write seccomp logs to dmesg
#seccomp_log: true

