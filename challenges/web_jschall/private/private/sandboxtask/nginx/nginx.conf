load_module modules/ngx_http_js_challenge_module.so;

user www-data;
worker_processes auto;
pid /run/nginx.pid;

events {
    worker_connections 768;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    gzip on;
    gunzip on;

    autoindex on;
    server_tokens off;
    proxy_http_version 1.1;

    log_format  main_log  '[$server_name] $remote_addr - $upstream_cache_status [$time_local] "$request" '
                               '$status $request_time $body_bytes_sent '
                               '"$http_user_agent" "$http_x_real_ip"';

    access_log /dev/stdout main_log;
    #error_log /dev/stdout debug;
    error_log /dev/stdout warn;

    proxy_cache_path /tmp/cache levels=1:2 keys_zone=mycache:10m  max_size=10g inactive=5m use_temp_path=off;

    # accept-language: en,en-US;q=0.8,ja;q=0.6 -> "en"
    # accept-language: pl,en-US;q=0.8,ja;q=0.6 -> "pl"
    map $http_accept_language $language {
        default 'en';
        '~^(.+?),' $1;
    }

    # random meme
    map $msec $random_meme {
        default 1;
        ~(.*)0\.(.*) 1;
        ~(.*)1\.(.*) 1;
        ~(.*)2\.(.*) 1;
        ~(.*)3\.(.*) 2;
        ~(.*)4\.(.*) 2;
        ~(.*)5\.(.*) 2;
        ~(.*)6\.(.*) 3;
        ~(.*)7\.(.*) 3;
        ~(.*)8\.(.*) 3;
        ~(.*)9\.(.*) 3;
    }

    proxy_set_header Connection "";

    upstream backend {
        server 127.0.0.1:8080;
        keepalive 2;
    }
    upstream frontend {
        server 127.0.0.1:8081;
        keepalive 2;
    }
    upstream server_full {
        server 127.0.0.1:8082;
        keepalive 2;
    }
    upstream server_check_bot {
        server 127.0.0.1:8083;
        keepalive 2;
    }

    # main load balancer
    server {
        listen 80;
        server_name load_balancer;

        location / {
            proxy_set_header Connection "";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_pass http://server_check_bot;
        }
    }

    # flag
    server {
        listen 1337;
        server_name flag;

        location / {
            allow 127.0.0.1;
            deny all;
            return 200 'FLAG_PLACEHOLDER';
        }
    }

    # block bots
    server {
        listen 8083;
        server_name block_bots;

        js_challenge on;
        js_challenge_html /etc/nginx/loader.html;

        location / {
            proxy_pass http://server_full;
        }
    }

    # full app (frontend+backend)
    server {
        listen 8082;
        server_name full_app;

        proxy_cache mycache;
        proxy_cache_valid 404 30s;
        proxy_cache_valid 500 502 503 401 403 422 1s;
        proxy_cache_valid 30s;
        proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
        proxy_cache_key "$language$request_uri";

        # api entrypoint
        location /api {
            proxy_pass http://backend;
        }
        location /admin/api {
            proxy_pass http://backend;
        }

        # fallback
        location / {
            proxy_pass http://frontend;
        }
    }

    # frontend
    server {
        listen 8081;
        server_name frontend;

        root /public/pages/;

        # main page
        location = / {
            # checking file exists

            set $meme_uri "static/$random_meme.$language.png";
            if (-f "/public/$meme_uri") {
                rewrite .* /internal/main/ last;
            }

            set $meme_uri "static/$random_meme.en.png";
            if (-f "/public/$meme_uri") {
                rewrite .* /internal/main/ last;
            }

            set $meme_uri "static/0.png";
            rewrite .* /internal/main/ last;
        }

        location /internal/main/ {
            internal;
            sub_filter '__MEME__' '$meme_uri';
            sub_filter_once on;
            try_files $uri /main.html =404;
        }

        # admin page
        location = /admin/ {
            try_files $uri /admin.html =404;
        }

        # static files
        location /static/ {
            alias /public/static/;
        }

        # fallback
        location / {
            return 404;
        }
    }
}
